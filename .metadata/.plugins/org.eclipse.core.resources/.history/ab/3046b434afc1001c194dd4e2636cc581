package com.nttdata.client.controller;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.nttdata.client.model.Client;
import com.nttdata.client.model.ClientType;
import com.nttdata.client.model.dto.ClientDto;
import com.nttdata.client.service.IClientService;
import com.nttdata.client.service.IClientTypeService;

import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;

@RestController
@RequestMapping("/api/client")
public class ClientController {

	private static final Logger LOGGER = LoggerFactory.getLogger(ClientController.class);

	@Autowired
	private IClientService iClientService;

	@Autowired
	private IClientTypeService iClientTypeService;

	@GetMapping()
	public Flux<ClientDto> getClients() {
		LOGGER.debug("Getting clients!");
		return iClientService.getClients();
	}

	@GetMapping("/{id}")
	public Mono<ClientDto> getClient(@PathVariable String id) {
		LOGGER.debug("Getting a client:{0}", id);
		return iClientService.getClientById(id);
	}

	@GetMapping("/name/{name}")
	public Mono<ClientDto> getClientByName(@PathVariable String name) {

		LOGGER.debug("Getting getClientByName!");
		return iClientService.finClientByName(name);
	}

	@PostMapping("/create")
	public Mono<ClientDto> saveClient(@RequestBody Mono<ClientDto> clientDtoMono) {
		return iClientService.saveClients(clientDtoMono);
	}

	@PostMapping
    public Mono<ResponseEntity<Client>> create(@RequestParam String code, @RequestBody Mono<Client> request){
        return request
                .flatMap(clientCreate -> typeService.findByCode(code)
                        .flatMap(type ->{
                            if(clientCreate.getClientType() !=null && !code.equals(clientCreate.getClientType().getCode())) {
                                return Mono.empty();
                            } else{
                                clientCreate.setClientType(type);
                                return clientService.save(clientCreate);
                            }
                        }))
                .map(customerCreate -> ResponseEntity.created(URI.create("/api/clients/".concat(customerCreate.getId())))
                        .contentType(MediaType.APPLICATION_JSON)
                        .body(customerCreate))
                .switchIfEmpty(Mono.just(new ResponseEntity<>(HttpStatus.BAD_REQUEST)));
    }

	@PutMapping("/{id}")
	public Mono<ClientDto> updateClient(@RequestBody Mono<ClientDto> clientDtoMono, @PathVariable String id) {
		return iClientService.updateClients(clientDtoMono, id);
	}

	@DeleteMapping("/{id}")
	public Mono<Void> deleteClient(@PathVariable String id) {
		return iClientService.deleteClient(id);
	}

}
